from bs4 import BeautifulSoup
import requests
import pandas as pd
import re


class Scrape:

    def __init__(self):
        print("new Scraper")

    def scrape(self, **kwargs):
        #page_link  = 'https://www.zillow.com/manhattan-new-york-ny-10007/?searchQueryState={%22pagination%22:{},%22usersSearchTerm%22:%2210007%22,%22mapBounds%22:{%22west%22:-74.01448844714355,%22east%22:-74.00024055285644,%22south%22:40.710634221558685,%22north%22:40.716166870622764},%22regionSelection%22:[{%22regionId%22:61621,%22regionType%22:7}],%22isMapVisible%22:true,%22mapZoom%22:17,%22filterState%22:{%22isAllHomes%22:{%22value%22:true}},%22isListVisible%22:true}'

        # Century 21 doesn't have captcha
        page_link = 'https://www.century21.com/real-estate/new-york-ny-10007/LZ10007/?ty=0'
        page_response = requests.get(page_link, timeout=5)

        soup = BeautifulSoup(page_response.content, "html.parser")

        # print(str(soup))

        address_list = []
        price_list = []

        # For zillow. They have a captcha in place to prevent scraping.
        #this_address = page_content.find_all("div", {"class": "list-card-addr"})[0].text
        #this_price = page_content.find_all("div", {"class": "list-card-price"})[0].text

        #this_address = page_content.find_all("div", attrs={"class": "property-card"})
        # address_list.append(this_address)
        # price_list.append(this_price)
        #print([item["data-address"] for item in page_content.find_all('div', attrs={'class': 'property-card', "data-address": True})])

        my_results = soup.findAll('div', attrs={'class': 'property-card-primary-info'})
        # print(str(my_results))
        # Search for data in soup and add to a list of lists. The list of lists
        # Raw_rows will be converted into a dataframe.

        raw_rows = []

        for i in range(0, len(my_results)):
            price = my_results[i].find('a', attrs={'class': 'listing-price'})
            bed = my_results[i].find(
                    'div', attrs={'class': 'property-beds'})
            bed_int = 0
            address = my_results[i].find(
                    'div', attrs={'class': 'property-address'})
            if price is not None:
                price = price.text.strip()
            else:
                price = ""
            if bed is not None:
                bed = bed.text.strip()
                #bed = [int(s) for s in str.split() if s.isdigit()][0]
                bed_int = re.findall(r'\d+', bed)[0]
            else:
                bed_int = 0
            if address is not None:
                address = address.text.strip()
            else:
                address = ""
            #print(str(price) + '; ' +  str(address) + '; ' + str(bed) +  '; ')

            raw_rows.append([price, address, bed_int])

        # Create dataframe.
        df = pd.DataFrame(raw_rows, columns=['Price', 'Address', 'Bed'])
        df['Price'] = df['Price'].replace('[\$,]', '', regex=True).astype(float)
        #print(df.info)
        return(df)
